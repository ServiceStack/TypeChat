METHOD: POST
URL     https://api.openai.com/v1/chat/completions
HEADERS
    accept:             application/json, text/plain, */*
    accept-encoding:    gzip, compress, deflate, br
    authorization:      Bearer sk-***
    connection:         close
    content-length:     3324
    content-type:       application/json
    host:               api.openai.com
    openai-organization:
    user-agent:         axios/1.4.0

STATUS: 200 OK
HEADERS
    access-control-allow-origin: *
    alt-svc:            h3=":443"; ma=86400
    cache-control:      no-cache, must-revalidate
    cf-cache-status:    DYNAMIC
    cf-ray:             7f1d20eb7b738acf-PER
    connection:         close
    content-encoding:   br
    content-type:       application/json
    date:               Sat, 05 Aug 2023 06:54:28 GMT
    openai-model:       gpt-3.5-turbo-0613
    openai-organization: servicestack-inc
    openai-processing-ms: 3263
    openai-version:     2020-10-01
    server:             cloudflare
    strict-transport-security: max-age=15724800; includeSubDomains
    transfer-encoding:  chunked
    x-ratelimit-limit-requests: 3500
    x-ratelimit-limit-tokens: 90000
    x-ratelimit-remaining-requests: 3499
    x-ratelimit-remaining-tokens: 89223
    x-ratelimit-reset-requests: 17ms
    x-ratelimit-reset-tokens: 518ms
    x-request-id:       a83b298392f3c677803429de8384cccf



You are a service that translates user requests into JSON objects of type "CalendarActions" according to the following TypeScript definitions:
```
// The following types define the structure of an object of type CalendarActions that represents a list of requested calendar actions

export type CalendarActions = {
    actions: Action[];
};

export type Action =
    | AddEventAction
    | RemoveEventAction
    | AddParticipantsAction
    | ChangeTimeRangeAction
    | ChangeDescriptionAction
    | FindEventsAction
    | UnknownAction;

export type AddEventAction = {
    actionType: 'add event';
    event: Event;
};

export type RemoveEventAction = {
    actionType: 'remove event';
    eventReference: EventReference;
};

export type AddParticipantsAction = {
    actionType: 'add participants';
    // event to be augmented; if not specified assume last event discussed
    eventReference?: EventReference;
    // new participants (one or more)
    participants: string[];
};

export type ChangeTimeRangeAction = {
    actionType: 'change time range';
    // event to be changed
    eventReference?: EventReference;
    // new time range for the event
    timeRange: EventTimeRange;
};

export type ChangeDescriptionAction = {
    actionType: 'change description';
    // event to be changed
    eventReference?: EventReference;
    // new description for the event
    description: string;
};

export type FindEventsAction = {
    actionType: 'find events';
    // one or more event properties to use to search for matching events
    eventReference: EventReference;
};

// if the user types text that can not easily be understood as a calendar action, this action is used
export interface UnknownAction {
    actionType: 'unknown';
    // text typed by the user that the system did not understand
    text: string;
}

export type EventTimeRange = {
    startTime?: string;
    endTime?: string;
    duration?: string;
};

export type Event = {
    // date (example: March 22, 2024) or relative date (example: after EventReference)
    day: string;
    timeRange: EventTimeRange;
    description: string;
    location?: string;
    // a list of people or named groups like 'team'
    participants?: string[];
};

// properties used by the requester in referring to an event
// these properties are only specified if given directly by the requester
export type EventReference = {
    // date (example: March 22, 2024) or relative date (example: after EventReference)
    day?: string;
    // (examples: this month, this week, in the next two days)
    dayRange?: string;
    timeRange?: EventTimeRange;
    description?: string;
    location?: string;
    participants?: string[];
};
```
The following is a user request:
"""
I need to get my tires changed from 12:00 to 2:00 pm on Friday March 15, 2024
"""
The following is the user request translated into a JSON object with 2 spaces of indentation and no properties with the value undefined:


{
  "actions": [
    {
      "actionType": "add event",
      "event": {
        "day": "Friday March 15, 2024",
        "timeRange": {
          "startTime": "12:00 pm",
          "endTime": "2:00 pm"
        },
        "description": "get my tires changed"
      }
    }
  ]
}